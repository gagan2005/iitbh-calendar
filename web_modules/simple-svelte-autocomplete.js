import { S as SvelteComponent, i as init, s as safe_not_equal, e as element, a as append, b as attr, c as insert, l as listen, n as noop, d as detach, f as space, g as set_input_value, r as run_all, h as binding_callbacks, t as text, j as set_data, k as empty, m as destroy_each, H as HtmlTag } from './common/index-526d949a.js';

/* node_modules\simple-svelte-autocomplete\src\SimpleAutocomplete.svelte generated by Svelte v3.31.0 */

function add_css() {
	var style = element("style");
	style.id = "svelte-17gke0z-style";
	style.textContent = ".autocomplete.svelte-17gke0z.svelte-17gke0z{min-width:200px;display:inline-block;max-width:100%;position:relative;vertical-align:top;height:2.25em}.autocomplete.svelte-17gke0z.svelte-17gke0z:not(.hide-arrow)::after{border:3px solid transparent;border-radius:2px;border-right:0;border-top:0;content:\" \";display:block;height:0.625em;margin-top:-0.4375em;pointer-events:none;position:absolute;top:50%;-webkit-transform:rotate(-45deg);transform:rotate(-45deg);-webkit-transform-origin:center;transform-origin:center;width:0.625em;border-color:#3273dc;right:1.125em;z-index:4}.autocomplete.show-clear.svelte-17gke0z.svelte-17gke0z:not(.hide-arrow)::after{right:2.3em}.autocomplete.svelte-17gke0z .svelte-17gke0z{box-sizing:border-box}.autocomplete-input.svelte-17gke0z.svelte-17gke0z{font:inherit;width:100%;height:100%;padding:5px 11px}.autocomplete.svelte-17gke0z:not(.hide-arrow) .autocomplete-input.svelte-17gke0z{padding-right:2em}.autocomplete.show-clear.svelte-17gke0z:not(.hide-arrow) .autocomplete-input.svelte-17gke0z{padding-right:3.2em}.autocomplete.hide-arrow.show-clear.svelte-17gke0z .autocomplete-input.svelte-17gke0z{padding-right:2em}.autocomplete-list.svelte-17gke0z.svelte-17gke0z{background:#fff;position:relative;width:100%;overflow-y:auto;z-index:99;padding:10px 0;top:0px;border:1px solid #999;max-height:calc(15 * (1rem + 10px) + 15px);user-select:none}.autocomplete-list.svelte-17gke0z.svelte-17gke0z:empty{padding:0}.autocomplete-list-item.svelte-17gke0z.svelte-17gke0z{padding:5px 15px;color:#333;cursor:pointer;line-height:1}.autocomplete-list-item.svelte-17gke0z.svelte-17gke0z:hover,.autocomplete-list-item.selected.svelte-17gke0z.svelte-17gke0z{background-color:#2e69e2;color:#fff}.autocomplete-list-item-no-results.svelte-17gke0z.svelte-17gke0z{padding:5px 15px;color:#999;line-height:1}.autocomplete-list.hidden.svelte-17gke0z.svelte-17gke0z{display:none}.autocomplete.show-clear.svelte-17gke0z .autocomplete-clear-button.svelte-17gke0z{cursor:pointer;display:block;text-align:center;position:absolute;right:0.1em;padding:0.3em 0.6em;top:50%;-webkit-transform:translateY(-50%);-ms-transform:translateY(-50%);transform:translateY(-50%);z-index:4}.autocomplete.svelte-17gke0z:not(.show-clear) .autocomplete-clear-button.svelte-17gke0z{display:none}";
	append(document.head, style);
}

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[71] = list[i];
	child_ctx[73] = i;
	return child_ctx;
}

// (736:2) {#if showClear}
function create_if_block_6(ctx) {
	let span;
	let mounted;
	let dispose;

	return {
		c() {
			span = element("span");
			span.textContent = "âœ–";
			attr(span, "class", "autocomplete-clear-button svelte-17gke0z");
		},
		m(target, anchor) {
			insert(target, span, anchor);

			if (!mounted) {
				dispose = listen(span, "click", /*clear*/ ctx[26]);
				mounted = true;
			}
		},
		p: noop,
		d(detaching) {
			if (detaching) detach(span);
			mounted = false;
			dispose();
		}
	};
}

// (765:28) 
function create_if_block_5(ctx) {
	let div;
	let t;

	return {
		c() {
			div = element("div");
			t = text(/*noResultsText*/ ctx[1]);
			attr(div, "class", "autocomplete-list-item-no-results svelte-17gke0z");
		},
		m(target, anchor) {
			insert(target, div, anchor);
			append(div, t);
		},
		p(ctx, dirty) {
			if (dirty[0] & /*noResultsText*/ 2) set_data(t, /*noResultsText*/ ctx[1]);
		},
		d(detaching) {
			if (detaching) detach(div);
		}
	};
}

// (743:4) {#if filteredListItems && filteredListItems.length > 0}
function create_if_block(ctx) {
	let t;
	let if_block_anchor;
	let each_value = /*filteredListItems*/ ctx[16];
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	let if_block = /*maxItemsToShowInList*/ ctx[0] > 0 && /*filteredListItems*/ ctx[16].length > /*maxItemsToShowInList*/ ctx[0] && create_if_block_1(ctx);

	return {
		c() {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			t = space();
			if (if_block) if_block.c();
			if_block_anchor = empty();
		},
		m(target, anchor) {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(target, anchor);
			}

			insert(target, t, anchor);
			if (if_block) if_block.m(target, anchor);
			insert(target, if_block_anchor, anchor);
		},
		p(ctx, dirty) {
			if (dirty[0] & /*highlightIndex, onListItemClick, filteredListItems, maxItemsToShowInList*/ 622593) {
				each_value = /*filteredListItems*/ ctx[16];
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(t.parentNode, t);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value.length;
			}

			if (/*maxItemsToShowInList*/ ctx[0] > 0 && /*filteredListItems*/ ctx[16].length > /*maxItemsToShowInList*/ ctx[0]) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block_1(ctx);
					if_block.c();
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}
		},
		d(detaching) {
			destroy_each(each_blocks, detaching);
			if (detaching) detach(t);
			if (if_block) if_block.d(detaching);
			if (detaching) detach(if_block_anchor);
		}
	};
}

// (745:8) {#if listItem && (maxItemsToShowInList <= 0 || i < maxItemsToShowInList)}
function create_if_block_2(ctx) {
	let if_block_anchor;
	let if_block = /*listItem*/ ctx[71] && create_if_block_3(ctx);

	return {
		c() {
			if (if_block) if_block.c();
			if_block_anchor = empty();
		},
		m(target, anchor) {
			if (if_block) if_block.m(target, anchor);
			insert(target, if_block_anchor, anchor);
		},
		p(ctx, dirty) {
			if (/*listItem*/ ctx[71]) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block_3(ctx);
					if_block.c();
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}
		},
		d(detaching) {
			if (if_block) if_block.d(detaching);
			if (detaching) detach(if_block_anchor);
		}
	};
}

// (746:10) {#if listItem}
function create_if_block_3(ctx) {
	let div;
	let div_class_value;
	let mounted;
	let dispose;

	function select_block_type_1(ctx, dirty) {
		if (/*listItem*/ ctx[71].highlighted) return create_if_block_4;
		return create_else_block;
	}

	let current_block_type = select_block_type_1(ctx);
	let if_block = current_block_type(ctx);

	function click_handler() {
		return /*click_handler*/ ctx[48](/*listItem*/ ctx[71]);
	}

	return {
		c() {
			div = element("div");
			if_block.c();

			attr(div, "class", div_class_value = "autocomplete-list-item " + (/*i*/ ctx[73] === /*highlightIndex*/ ctx[15]
			? "selected"
			: "") + " svelte-17gke0z");
		},
		m(target, anchor) {
			insert(target, div, anchor);
			if_block.m(div, null);

			if (!mounted) {
				dispose = listen(div, "click", click_handler);
				mounted = true;
			}
		},
		p(new_ctx, dirty) {
			ctx = new_ctx;

			if (current_block_type === (current_block_type = select_block_type_1(ctx)) && if_block) {
				if_block.p(ctx, dirty);
			} else {
				if_block.d(1);
				if_block = current_block_type(ctx);

				if (if_block) {
					if_block.c();
					if_block.m(div, null);
				}
			}

			if (dirty[0] & /*highlightIndex*/ 32768 && div_class_value !== (div_class_value = "autocomplete-list-item " + (/*i*/ ctx[73] === /*highlightIndex*/ ctx[15]
			? "selected"
			: "") + " svelte-17gke0z")) {
				attr(div, "class", div_class_value);
			}
		},
		d(detaching) {
			if (detaching) detach(div);
			if_block.d();
			mounted = false;
			dispose();
		}
	};
}

// (752:14) {:else}
function create_else_block(ctx) {
	let html_tag;
	let raw_value = /*listItem*/ ctx[71].label + "";
	let html_anchor;

	return {
		c() {
			html_anchor = empty();
			html_tag = new HtmlTag(html_anchor);
		},
		m(target, anchor) {
			html_tag.m(raw_value, target, anchor);
			insert(target, html_anchor, anchor);
		},
		p(ctx, dirty) {
			if (dirty[0] & /*filteredListItems*/ 65536 && raw_value !== (raw_value = /*listItem*/ ctx[71].label + "")) html_tag.p(raw_value);
		},
		d(detaching) {
			if (detaching) detach(html_anchor);
			if (detaching) html_tag.d();
		}
	};
}

// (750:14) {#if listItem.highlighted}
function create_if_block_4(ctx) {
	let html_tag;
	let raw_value = /*listItem*/ ctx[71].highlighted.label + "";
	let html_anchor;

	return {
		c() {
			html_anchor = empty();
			html_tag = new HtmlTag(html_anchor);
		},
		m(target, anchor) {
			html_tag.m(raw_value, target, anchor);
			insert(target, html_anchor, anchor);
		},
		p(ctx, dirty) {
			if (dirty[0] & /*filteredListItems*/ 65536 && raw_value !== (raw_value = /*listItem*/ ctx[71].highlighted.label + "")) html_tag.p(raw_value);
		},
		d(detaching) {
			if (detaching) detach(html_anchor);
			if (detaching) html_tag.d();
		}
	};
}

// (744:6) {#each filteredListItems as listItem, i}
function create_each_block(ctx) {
	let if_block_anchor;
	let if_block = /*listItem*/ ctx[71] && (/*maxItemsToShowInList*/ ctx[0] <= 0 || /*i*/ ctx[73] < /*maxItemsToShowInList*/ ctx[0]) && create_if_block_2(ctx);

	return {
		c() {
			if (if_block) if_block.c();
			if_block_anchor = empty();
		},
		m(target, anchor) {
			if (if_block) if_block.m(target, anchor);
			insert(target, if_block_anchor, anchor);
		},
		p(ctx, dirty) {
			if (/*listItem*/ ctx[71] && (/*maxItemsToShowInList*/ ctx[0] <= 0 || /*i*/ ctx[73] < /*maxItemsToShowInList*/ ctx[0])) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block_2(ctx);
					if_block.c();
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}
		},
		d(detaching) {
			if (if_block) if_block.d(detaching);
			if (detaching) detach(if_block_anchor);
		}
	};
}

// (760:6) {#if maxItemsToShowInList > 0 && filteredListItems.length > maxItemsToShowInList}
function create_if_block_1(ctx) {
	let div;
	let t0;
	let t1_value = /*filteredListItems*/ ctx[16].length - /*maxItemsToShowInList*/ ctx[0] + "";
	let t1;
	let t2;

	return {
		c() {
			div = element("div");
			t0 = text("...");
			t1 = text(t1_value);
			t2 = text(" results not shown");
			attr(div, "class", "autocomplete-list-item-no-results svelte-17gke0z");
		},
		m(target, anchor) {
			insert(target, div, anchor);
			append(div, t0);
			append(div, t1);
			append(div, t2);
		},
		p(ctx, dirty) {
			if (dirty[0] & /*filteredListItems, maxItemsToShowInList*/ 65537 && t1_value !== (t1_value = /*filteredListItems*/ ctx[16].length - /*maxItemsToShowInList*/ ctx[0] + "")) set_data(t1, t1_value);
		},
		d(detaching) {
			if (detaching) detach(div);
		}
	};
}

function create_fragment(ctx) {
	let div1;
	let input_1;
	let input_1_class_value;
	let input_1_id_value;
	let t0;
	let t1;
	let div0;
	let div0_class_value;
	let div1_class_value;
	let mounted;
	let dispose;
	let if_block0 = /*showClear*/ ctx[9] && create_if_block_6(ctx);

	function select_block_type(ctx, dirty) {
		if (/*filteredListItems*/ ctx[16] && /*filteredListItems*/ ctx[16].length > 0) return create_if_block;
		if (/*noResultsText*/ ctx[1]) return create_if_block_5;
	}

	let current_block_type = select_block_type(ctx);
	let if_block1 = current_block_type && current_block_type(ctx);

	return {
		c() {
			div1 = element("div");
			input_1 = element("input");
			t0 = space();
			if (if_block0) if_block0.c();
			t1 = space();
			div0 = element("div");
			if (if_block1) if_block1.c();
			attr(input_1, "type", "text");

			attr(input_1, "class", input_1_class_value = "" + ((/*inputClassName*/ ctx[4]
			? /*inputClassName*/ ctx[4]
			: "") + " input autocomplete-input" + " svelte-17gke0z"));

			attr(input_1, "id", input_1_id_value = /*inputId*/ ctx[5] ? /*inputId*/ ctx[5] : "");
			attr(input_1, "placeholder", /*placeholder*/ ctx[2]);
			attr(input_1, "name", /*name*/ ctx[6]);
			input_1.disabled = /*disabled*/ ctx[10];
			attr(input_1, "title", /*title*/ ctx[11]);

			attr(div0, "class", div0_class_value = "" + ((/*dropdownClassName*/ ctx[7]
			? /*dropdownClassName*/ ctx[7]
			: "") + " autocomplete-list " + (/*showList*/ ctx[17] ? "" : "hidden") + "\n    is-fullwidth" + " svelte-17gke0z"));

			attr(div1, "class", div1_class_value = "" + ((/*className*/ ctx[3] ? /*className*/ ctx[3] : "") + "\n  " + (/*hideArrow*/ ctx[8] ? "hide-arrow is-multiple" : "") + "\n  " + (/*showClear*/ ctx[9] ? "show-clear" : "") + " autocomplete select is-fullwidth " + /*uniqueId*/ ctx[18] + " svelte-17gke0z"));
		},
		m(target, anchor) {
			insert(target, div1, anchor);
			append(div1, input_1);
			/*input_1_binding*/ ctx[46](input_1);
			set_input_value(input_1, /*text*/ ctx[12]);
			append(div1, t0);
			if (if_block0) if_block0.m(div1, null);
			append(div1, t1);
			append(div1, div0);
			if (if_block1) if_block1.m(div0, null);
			/*div0_binding*/ ctx[49](div0);

			if (!mounted) {
				dispose = [
					listen(window, "click", /*onDocumentClick*/ ctx[20]),
					listen(input_1, "input", /*input_1_input_handler*/ ctx[47]),
					listen(input_1, "input", /*onInput*/ ctx[23]),
					listen(input_1, "focus", /*onFocus*/ ctx[25]),
					listen(input_1, "keydown", /*onKeyDown*/ ctx[21]),
					listen(input_1, "click", /*onInputClick*/ ctx[24]),
					listen(input_1, "keypress", /*onKeyPress*/ ctx[22])
				];

				mounted = true;
			}
		},
		p(ctx, dirty) {
			if (dirty[0] & /*inputClassName*/ 16 && input_1_class_value !== (input_1_class_value = "" + ((/*inputClassName*/ ctx[4]
			? /*inputClassName*/ ctx[4]
			: "") + " input autocomplete-input" + " svelte-17gke0z"))) {
				attr(input_1, "class", input_1_class_value);
			}

			if (dirty[0] & /*inputId*/ 32 && input_1_id_value !== (input_1_id_value = /*inputId*/ ctx[5] ? /*inputId*/ ctx[5] : "")) {
				attr(input_1, "id", input_1_id_value);
			}

			if (dirty[0] & /*placeholder*/ 4) {
				attr(input_1, "placeholder", /*placeholder*/ ctx[2]);
			}

			if (dirty[0] & /*name*/ 64) {
				attr(input_1, "name", /*name*/ ctx[6]);
			}

			if (dirty[0] & /*disabled*/ 1024) {
				input_1.disabled = /*disabled*/ ctx[10];
			}

			if (dirty[0] & /*title*/ 2048) {
				attr(input_1, "title", /*title*/ ctx[11]);
			}

			if (dirty[0] & /*text*/ 4096 && input_1.value !== /*text*/ ctx[12]) {
				set_input_value(input_1, /*text*/ ctx[12]);
			}

			if (/*showClear*/ ctx[9]) {
				if (if_block0) {
					if_block0.p(ctx, dirty);
				} else {
					if_block0 = create_if_block_6(ctx);
					if_block0.c();
					if_block0.m(div1, t1);
				}
			} else if (if_block0) {
				if_block0.d(1);
				if_block0 = null;
			}

			if (current_block_type === (current_block_type = select_block_type(ctx)) && if_block1) {
				if_block1.p(ctx, dirty);
			} else {
				if (if_block1) if_block1.d(1);
				if_block1 = current_block_type && current_block_type(ctx);

				if (if_block1) {
					if_block1.c();
					if_block1.m(div0, null);
				}
			}

			if (dirty[0] & /*dropdownClassName, showList*/ 131200 && div0_class_value !== (div0_class_value = "" + ((/*dropdownClassName*/ ctx[7]
			? /*dropdownClassName*/ ctx[7]
			: "") + " autocomplete-list " + (/*showList*/ ctx[17] ? "" : "hidden") + "\n    is-fullwidth" + " svelte-17gke0z"))) {
				attr(div0, "class", div0_class_value);
			}

			if (dirty[0] & /*className, hideArrow, showClear*/ 776 && div1_class_value !== (div1_class_value = "" + ((/*className*/ ctx[3] ? /*className*/ ctx[3] : "") + "\n  " + (/*hideArrow*/ ctx[8] ? "hide-arrow is-multiple" : "") + "\n  " + (/*showClear*/ ctx[9] ? "show-clear" : "") + " autocomplete select is-fullwidth " + /*uniqueId*/ ctx[18] + " svelte-17gke0z"))) {
				attr(div1, "class", div1_class_value);
			}
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(div1);
			/*input_1_binding*/ ctx[46](null);
			if (if_block0) if_block0.d();

			if (if_block1) {
				if_block1.d();
			}

			/*div0_binding*/ ctx[49](null);
			mounted = false;
			run_all(dispose);
		}
	};
}

function safeStringFunction(theFunction, argument) {
	if (typeof theFunction !== "function") {
		console.error("Not a function: " + theFunction + ", argument: " + argument);
	}

	let originalResult;

	try {
		originalResult = theFunction(argument);
	} catch(error) {
		console.warn("Error executing Autocomplete function on value: " + argument + " function: " + theFunction);
	}

	let result = originalResult;

	if (result === undefined || result === null) {
		result = "";
	}

	if (typeof result !== "string") {
		result = result.toString();
	}

	return result;
}

function instance($$self, $$props, $$invalidate) {
	let { items = [] } = $$props;
	let { labelFieldName = undefined } = $$props;
	let { keywordsFieldName = labelFieldName } = $$props;
	let { valueFieldName = undefined } = $$props;

	let { labelFunction = function (item) {
		if (item === undefined || item === null) {
			return "";
		}

		return labelFieldName ? item[labelFieldName] : item;
	} } = $$props;

	let { keywordsFunction = function (item) {
		if (item === undefined || item === null) {
			return "";
		}

		return keywordsFieldName
		? item[keywordsFieldName]
		: labelFunction(item);
	} } = $$props;

	let { valueFunction = function (item) {
		if (item === undefined || item === null) {
			return item;
		}

		return valueFieldName ? item[valueFieldName] : item;
	} } = $$props;

	let { keywordsCleanFunction = function (keywords) {
		return keywords;
	} } = $$props;

	let { textCleanFunction = function (userEnteredText) {
		return userEnteredText;
	} } = $$props;

	let { searchFunction = false } = $$props;

	let { beforeChange = function (oldSelectedItem, newSelectedItem) {
		return true;
	} } = $$props;

	let { onChange = function (newSelectedItem) {
		
	} } = $$props;

	let { selectFirstIfEmpty = false } = $$props;
	let { minCharactersToSearch = 1 } = $$props;
	let { maxItemsToShowInList = 0 } = $$props;
	let { noResultsText = "No results found" } = $$props;
	const uniqueId = "sautocomplete-" + Math.floor(Math.random() * 1000);

	function safeLabelFunction(item) {
		// console.log("labelFunction: " + labelFunction);
		// console.log("safeLabelFunction, item: " + item);
		return safeStringFunction(labelFunction, item);
	}

	function safeKeywordsFunction(item) {
		// console.log("safeKeywordsFunction");
		const keywords = safeStringFunction(keywordsFunction, item);

		let result = safeStringFunction(keywordsCleanFunction, keywords);
		result = result.toLowerCase().trim();

		if (debug) {
			console.log("Extracted keywords: '" + result + "' from item: " + JSON.stringify(item));
		}

		return result;
	}

	let { placeholder = undefined } = $$props;
	let { className = undefined } = $$props;
	let { inputClassName = undefined } = $$props;
	let { inputId = undefined } = $$props;
	let { name = undefined } = $$props;
	let { dropdownClassName = undefined } = $$props;
	let { hideArrow = false } = $$props;
	let { showClear = false } = $$props;
	let { disabled = false } = $$props;
	let { title = undefined } = $$props;
	let { debug = false } = $$props;
	let { selectedItem = undefined } = $$props;
	let { value = undefined } = $$props;
	let text;
	let filteredTextLength = 0;

	function onSelectedItemChanged() {
		$$invalidate(29, value = valueFunction(selectedItem));
		$$invalidate(12, text = safeLabelFunction(selectedItem));
		onChange(selectedItem);
	}

	// HTML elements
	let input;

	let list;

	// UI state
	let opened = false;

	let highlightIndex = -1;

	// view model
	let filteredListItems;

	let listItems = [];

	function prepareListItems() {
		let tStart;

		if (debug) {
			tStart = performance.now();
			console.log("prepare items to search");
			console.log("items: " + JSON.stringify(items));
		}

		if (!Array.isArray(items)) {
			console.warn("Autocomplete items / search function did not return array but", items);
			$$invalidate(27, items = []);
		}

		const length = items ? items.length : 0;
		listItems = new Array(length);

		if (length > 0) {
			items.forEach((item, i) => {
				const listItem = getListItem(item);

				if (listItem == undefined) {
					console.log("Undefined item for: ", item);
				}

				listItems[i] = listItem;
			});
		}

		if (debug) {
			const tEnd = performance.now();
			console.log(listItems.length + " items to search prepared in " + (tEnd - tStart) + " milliseconds");
		}
	}

	function getListItem(item) {
		return {
			// keywords representation of the item
			keywords: safeKeywordsFunction(item),
			// item label
			label: safeLabelFunction(item),
			// store reference to the origial item
			item
		};
	}

	function prepareUserEnteredText(userEnteredText) {
		if (userEnteredText === undefined || userEnteredText === null) {
			return "";
		}

		const textFiltered = userEnteredText.replace(/[&/\\#,+()$~%.'":*?<>{}]/g, " ").trim();
		$$invalidate(44, filteredTextLength = textFiltered.length);

		if (minCharactersToSearch > 1) {
			if (filteredTextLength < minCharactersToSearch) {
				return "";
			}
		}

		const cleanUserEnteredText = textCleanFunction(textFiltered);
		const textFilteredLowerCase = cleanUserEnteredText.toLowerCase().trim();

		if (debug) {
			console.log("Change user entered text '" + userEnteredText + "' into '" + textFilteredLowerCase + "'");
		}

		return textFilteredLowerCase;
	}

	async function search() {
		let tStart;

		if (debug) {
			tStart = performance.now();
			console.log("Searching user entered text: '" + text + "'");
		}

		const textFiltered = prepareUserEnteredText(text);

		if (textFiltered === "") {
			$$invalidate(16, filteredListItems = listItems);
			closeIfMinCharsToSearchReached();

			if (debug) {
				console.log("User entered text is empty set the list of items to all items");
			}

			return;
		}

		if (searchFunction) {
			$$invalidate(27, items = await searchFunction(textFiltered));
			prepareListItems();
		}

		const searchWords = textFiltered.split(" ");

		let tempfilteredListItems = listItems.filter(listItem => {
			if (!listItem) {
				return false;
			}

			const itemKeywords = listItem.keywords;
			let matches = 0;

			searchWords.forEach(searchWord => {
				if (itemKeywords.includes(searchWord)) {
					matches++;
				}
			});

			return matches >= searchWords.length;
		});

		const hlfilter = highlightFilter(textFiltered, ["label"]);
		const filteredListItemsHighlighted = tempfilteredListItems.map(hlfilter);
		$$invalidate(16, filteredListItems = filteredListItemsHighlighted);
		closeIfMinCharsToSearchReached();

		if (debug) {
			const tEnd = performance.now();
			console.log("Search took " + (tEnd - tStart) + " milliseconds, found " + filteredListItems.length + " items");
		}
	}

	// $: text, search();
	function selectListItem(listItem) {
		if (debug) {
			console.log("selectListItem");
		}

		if ("undefined" === typeof listItem) {
			if (debug) {
				console.log(`listItem ${i} is undefined. Can not select.`);
			}

			return false;
		}

		const newSelectedItem = listItem.item;

		if (beforeChange(selectedItem, newSelectedItem)) {
			$$invalidate(28, selectedItem = newSelectedItem);
		}

		return true;
	}

	function selectItem() {
		if (debug) {
			console.log("selectItem");
		}

		const listItem = filteredListItems[highlightIndex];

		if (selectListItem(listItem)) {
			close();
		}
	}

	function up() {
		if (debug) {
			console.log("up");
		}

		open();
		if (highlightIndex > 0) $$invalidate(15, highlightIndex--, highlightIndex);
		highlight();
	}

	function down() {
		if (debug) {
			console.log("down");
		}

		open();
		if (highlightIndex < filteredListItems.length - 1) $$invalidate(15, highlightIndex++, highlightIndex);
		highlight();
	}

	function highlight() {
		if (debug) {
			console.log("highlight");
		}

		const query = ".selected";

		if (debug) {
			console.log("Seaching DOM element: " + query + " in " + list);
		}

		const el = list.querySelector(query);

		if (el) {
			if (typeof el.scrollIntoViewIfNeeded === "function") {
				if (debug) {
					console.log("Scrolling selected item into view");
				}

				el.scrollIntoViewIfNeeded();
			} else {
				if (debug) {
					console.warn("Could not scroll selected item into view, scrollIntoViewIfNeeded not supported");
				}
			}
		} else {
			if (debug) {
				console.warn("Selected item not found to scroll into view");
			}
		}
	}

	function onListItemClick(listItem) {
		if (debug) {
			console.log("onListItemClick");
		}

		if (selectListItem(listItem)) {
			close();
		}
	}

	function onDocumentClick(e) {
		if (debug) {
			console.log("onDocumentClick: " + JSON.stringify(e.target));
		}

		if (e.target.closest("." + uniqueId)) {
			if (debug) {
				console.log("onDocumentClick inside");
			}

			// resetListToAllItemsAndOpen();
			highlight();
		} else {
			if (debug) {
				console.log("onDocumentClick outside");
			}

			close();
		}
	}

	function onKeyDown(e) {
		if (debug) {
			console.log("onKeyDown");
		}

		let key = e.key;
		if (key === "Tab" && e.shiftKey) key = "ShiftTab";

		const fnmap = {
			Tab: opened ? down.bind(this) : null,
			ShiftTab: opened ? up.bind(this) : null,
			ArrowDown: down.bind(this),
			ArrowUp: up.bind(this),
			Escape: onEsc.bind(this)
		};

		const fn = fnmap[key];

		if (typeof fn === "function") {
			e.preventDefault();
			fn(e);
		}
	}

	function onKeyPress(e) {
		if (debug) {
			console.log("onKeyPress");
		}

		if (e.key === "Enter") {
			e.preventDefault();
			selectItem();
		}
	}

	function onInput(e) {
		if (debug) {
			console.log("onInput");
		}

		$$invalidate(12, text = e.target.value);
		search();
		$$invalidate(15, highlightIndex = 0);
		open();
	}

	function onInputClick() {
		if (debug) {
			console.log("onInputClick");
		}

		resetListToAllItemsAndOpen();
	}

	function onEsc(e) {
		if (debug) {
			console.log("onEsc");
		}

		//if (text) return clear();
		e.stopPropagation();

		if (opened) {
			input.focus();
			close();
		}
	}

	function onFocus() {
		if (debug) {
			console.log("onFocus");
		}

		resetListToAllItemsAndOpen();
	}

	function resetListToAllItemsAndOpen() {
		if (debug) {
			console.log("resetListToAllItemsAndOpen");
		}

		$$invalidate(16, filteredListItems = listItems);
		open();

		// find selected item
		if (selectedItem) {
			if (debug) {
				console.log("Searching currently selected item: " + JSON.stringify(selectedItem));
			}

			for (let i = 0; i < listItems.length; i++) {
				const listItem = listItems[i];

				if ("undefined" === typeof listItem) {
					if (debug) {
						console.log(`listItem ${i} is undefined. Skipping.`);
					}

					continue;
				}

				if (debug) {
					console.log("Item " + i + ": " + JSON.stringify(listItem));
				}

				if (selectedItem == listItem.item) {
					$$invalidate(15, highlightIndex = i);

					if (debug) {
						console.log("Found selected item: " + i + ": " + JSON.stringify(listItem));
					}

					highlight();
					break;
				}
			}
		}
	}

	function open() {
		if (debug) {
			console.log("open");
		}

		// check if the search text has more than the min chars required
		if (isMinCharsToSearchReached()) {
			return;
		}

		$$invalidate(45, opened = true);
	}

	function close() {
		if (debug) {
			console.log("close");
		}

		$$invalidate(45, opened = false);

		if (!text && selectFirstIfEmpty) {
			highlightFilter = 0;
			selectItem();
		}
	}

	function isMinCharsToSearchReached() {
		return minCharactersToSearch > 1 && filteredTextLength < minCharactersToSearch;
	}

	function closeIfMinCharsToSearchReached() {
		if (isMinCharsToSearchReached()) {
			close();
		}
	}

	function clear() {
		if (debug) {
			console.log("clear");
		}

		$$invalidate(12, text = "");
		$$invalidate(28, selectedItem = undefined);

		setTimeout(() => {
			input.focus();
			close();
		});
	}

	// 'item number one'.replace(/(it)(.*)(nu)(.*)(one)/ig, '<b>$1</b>$2 <b>$3</b>$4 <b>$5</b>')
	function highlightFilter(q, fields) {
		const qs = "(" + q.trim().replace(/\s/g, ")(.*)(") + ")";
		const reg = new RegExp(qs, "ig");
		let n = 1;
		const len = qs.split(")(").length + 1;
		let repl = "";
		for (; n < len; n++) repl += n % 2 ? `<b>$${n}</b>` : `$${n}`;

		return i => {
			const newI = Object.assign({ highlighted: {} }, i);

			if (fields) {
				fields.forEach(f => {
					if (!newI[f]) return;
					newI.highlighted[f] = newI[f].replace(reg, repl);
				});
			}

			return newI;
		};
	}

	function input_1_binding($$value) {
		binding_callbacks[$$value ? "unshift" : "push"](() => {
			input = $$value;
			$$invalidate(13, input);
		});
	}

	function input_1_input_handler() {
		text = this.value;
		$$invalidate(12, text);
	}

	const click_handler = listItem => onListItemClick(listItem);

	function div0_binding($$value) {
		binding_callbacks[$$value ? "unshift" : "push"](() => {
			list = $$value;
			$$invalidate(14, list);
		});
	}

	$$self.$$set = $$props => {
		if ("items" in $$props) $$invalidate(27, items = $$props.items);
		if ("labelFieldName" in $$props) $$invalidate(30, labelFieldName = $$props.labelFieldName);
		if ("keywordsFieldName" in $$props) $$invalidate(31, keywordsFieldName = $$props.keywordsFieldName);
		if ("valueFieldName" in $$props) $$invalidate(32, valueFieldName = $$props.valueFieldName);
		if ("labelFunction" in $$props) $$invalidate(33, labelFunction = $$props.labelFunction);
		if ("keywordsFunction" in $$props) $$invalidate(34, keywordsFunction = $$props.keywordsFunction);
		if ("valueFunction" in $$props) $$invalidate(35, valueFunction = $$props.valueFunction);
		if ("keywordsCleanFunction" in $$props) $$invalidate(36, keywordsCleanFunction = $$props.keywordsCleanFunction);
		if ("textCleanFunction" in $$props) $$invalidate(37, textCleanFunction = $$props.textCleanFunction);
		if ("searchFunction" in $$props) $$invalidate(38, searchFunction = $$props.searchFunction);
		if ("beforeChange" in $$props) $$invalidate(39, beforeChange = $$props.beforeChange);
		if ("onChange" in $$props) $$invalidate(40, onChange = $$props.onChange);
		if ("selectFirstIfEmpty" in $$props) $$invalidate(41, selectFirstIfEmpty = $$props.selectFirstIfEmpty);
		if ("minCharactersToSearch" in $$props) $$invalidate(42, minCharactersToSearch = $$props.minCharactersToSearch);
		if ("maxItemsToShowInList" in $$props) $$invalidate(0, maxItemsToShowInList = $$props.maxItemsToShowInList);
		if ("noResultsText" in $$props) $$invalidate(1, noResultsText = $$props.noResultsText);
		if ("placeholder" in $$props) $$invalidate(2, placeholder = $$props.placeholder);
		if ("className" in $$props) $$invalidate(3, className = $$props.className);
		if ("inputClassName" in $$props) $$invalidate(4, inputClassName = $$props.inputClassName);
		if ("inputId" in $$props) $$invalidate(5, inputId = $$props.inputId);
		if ("name" in $$props) $$invalidate(6, name = $$props.name);
		if ("dropdownClassName" in $$props) $$invalidate(7, dropdownClassName = $$props.dropdownClassName);
		if ("hideArrow" in $$props) $$invalidate(8, hideArrow = $$props.hideArrow);
		if ("showClear" in $$props) $$invalidate(9, showClear = $$props.showClear);
		if ("disabled" in $$props) $$invalidate(10, disabled = $$props.disabled);
		if ("title" in $$props) $$invalidate(11, title = $$props.title);
		if ("debug" in $$props) $$invalidate(43, debug = $$props.debug);
		if ("selectedItem" in $$props) $$invalidate(28, selectedItem = $$props.selectedItem);
		if ("value" in $$props) $$invalidate(29, value = $$props.value);
	};

	let showList;

	$$self.$$.update = () => {
		if ($$self.$$.dirty[0] & /*selectedItem*/ 268435456) {
			 (onSelectedItemChanged());
		}

		if ($$self.$$.dirty[0] & /*items*/ 134217728 | $$self.$$.dirty[1] & /*opened, filteredTextLength*/ 24576) {
			 $$invalidate(17, showList = opened && (items && items.length > 0 || filteredTextLength > 0));
		}

		if ($$self.$$.dirty[0] & /*items*/ 134217728) {
			 (prepareListItems());
		}
	};

	return [
		maxItemsToShowInList,
		noResultsText,
		placeholder,
		className,
		inputClassName,
		inputId,
		name,
		dropdownClassName,
		hideArrow,
		showClear,
		disabled,
		title,
		text,
		input,
		list,
		highlightIndex,
		filteredListItems,
		showList,
		uniqueId,
		onListItemClick,
		onDocumentClick,
		onKeyDown,
		onKeyPress,
		onInput,
		onInputClick,
		onFocus,
		clear,
		items,
		selectedItem,
		value,
		labelFieldName,
		keywordsFieldName,
		valueFieldName,
		labelFunction,
		keywordsFunction,
		valueFunction,
		keywordsCleanFunction,
		textCleanFunction,
		searchFunction,
		beforeChange,
		onChange,
		selectFirstIfEmpty,
		minCharactersToSearch,
		debug,
		filteredTextLength,
		opened,
		input_1_binding,
		input_1_input_handler,
		click_handler,
		div0_binding
	];
}

class SimpleAutocomplete extends SvelteComponent {
	constructor(options) {
		super();
		if (!document.getElementById("svelte-17gke0z-style")) add_css();

		init(
			this,
			options,
			instance,
			create_fragment,
			safe_not_equal,
			{
				items: 27,
				labelFieldName: 30,
				keywordsFieldName: 31,
				valueFieldName: 32,
				labelFunction: 33,
				keywordsFunction: 34,
				valueFunction: 35,
				keywordsCleanFunction: 36,
				textCleanFunction: 37,
				searchFunction: 38,
				beforeChange: 39,
				onChange: 40,
				selectFirstIfEmpty: 41,
				minCharactersToSearch: 42,
				maxItemsToShowInList: 0,
				noResultsText: 1,
				placeholder: 2,
				className: 3,
				inputClassName: 4,
				inputId: 5,
				name: 6,
				dropdownClassName: 7,
				hideArrow: 8,
				showClear: 9,
				disabled: 10,
				title: 11,
				debug: 43,
				selectedItem: 28,
				value: 29
			},
			[-1, -1, -1]
		);
	}
}

export default SimpleAutocomplete;
