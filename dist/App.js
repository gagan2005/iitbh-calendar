/* src\App.svelte generated by Svelte v3.31.0 */
import {
	SvelteComponent,
	add_flush_callback,
	append,
	attr,
	bind,
	binding_callbacks,
	create_component,
	destroy_component,
	destroy_each,
	detach,
	element,
	empty,
	init,
	insert,
	listen,
	mount_component,
	noop,
	run_all,
	safe_not_equal,
	set_data,
	space,
	text,
	transition_in,
	transition_out
} from "../web_modules/svelte/internal.js";

import AutoComplete from "../web_modules/simple-svelte-autocomplete.js";
import courseData from "./data/courses.json.proxy.js";
import { makeCalendar } from "./createCalendar.js";

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[9] = list[i];
	child_ctx[11] = i;
	return child_ctx;
}

// (55:0) {#if selectedCourse}
function create_if_block_1(ctx) {
	let pre;
	let t0;
	let t1_value = /*selectedCourse*/ ctx[0].lecture + "";
	let t1;
	let t2;
	let a;
	let t3_value = /*selectedCourse*/ ctx[0].link + "";
	let t3;
	let a_href_value;
	let t4;
	let t5_value = /*selectedCourse*/ ctx[0].instructor + "";
	let t5;
	let t6;
	let t7_value = /*selectedCourse*/ ctx[0].credits + "";
	let t7;

	return {
		c() {
			pre = element("pre");
			t0 = text("Slot: ");
			t1 = text(t1_value);
			t2 = text("\r\nLink: ");
			a = element("a");
			t3 = text(t3_value);
			t4 = text("\r\nInstructor: ");
			t5 = text(t5_value);
			t6 = text("\r\nCredits: ");
			t7 = text(t7_value);
			attr(a, "href", a_href_value = /*selectedCourse*/ ctx[0].link);
		},
		m(target, anchor) {
			insert(target, pre, anchor);
			append(pre, t0);
			append(pre, t1);
			append(pre, t2);
			append(pre, a);
			append(a, t3);
			append(pre, t4);
			append(pre, t5);
			append(pre, t6);
			append(pre, t7);
		},
		p(ctx, dirty) {
			if (dirty & /*selectedCourse*/ 1 && t1_value !== (t1_value = /*selectedCourse*/ ctx[0].lecture + "")) set_data(t1, t1_value);
			if (dirty & /*selectedCourse*/ 1 && t3_value !== (t3_value = /*selectedCourse*/ ctx[0].link + "")) set_data(t3, t3_value);

			if (dirty & /*selectedCourse*/ 1 && a_href_value !== (a_href_value = /*selectedCourse*/ ctx[0].link)) {
				attr(a, "href", a_href_value);
			}

			if (dirty & /*selectedCourse*/ 1 && t5_value !== (t5_value = /*selectedCourse*/ ctx[0].instructor + "")) set_data(t5, t5_value);
			if (dirty & /*selectedCourse*/ 1 && t7_value !== (t7_value = /*selectedCourse*/ ctx[0].credits + "")) set_data(t7, t7_value);
		},
		d(detaching) {
			if (detaching) detach(pre);
		}
	};
}

// (66:2) {#each selectedCourses as course, idx}
function create_each_block(ctx) {
	let li;
	let t0_value = /*course*/ ctx[9].label + "";
	let t0;
	let t1;
	let button;
	let t3;
	let mounted;
	let dispose;

	function click_handler() {
		return /*click_handler*/ ctx[8](/*idx*/ ctx[11]);
	}

	return {
		c() {
			li = element("li");
			t0 = text(t0_value);
			t1 = space();
			button = element("button");
			button.textContent = "delete";
			t3 = space();
		},
		m(target, anchor) {
			insert(target, li, anchor);
			append(li, t0);
			append(li, t1);
			append(li, button);
			append(li, t3);

			if (!mounted) {
				dispose = listen(button, "click", click_handler);
				mounted = true;
			}
		},
		p(new_ctx, dirty) {
			ctx = new_ctx;
			if (dirty & /*selectedCourses*/ 2 && t0_value !== (t0_value = /*course*/ ctx[9].label + "")) set_data(t0, t0_value);
		},
		d(detaching) {
			if (detaching) detach(li);
			mounted = false;
			dispose();
		}
	};
}

// (76:0) {#if selectedCourses.length > 0}
function create_if_block(ctx) {
	let button;
	let mounted;
	let dispose;

	return {
		c() {
			button = element("button");
			button.textContent = "Download calendar";
		},
		m(target, anchor) {
			insert(target, button, anchor);

			if (!mounted) {
				dispose = listen(button, "click", /*downloadCalendar*/ ctx[6]);
				mounted = true;
			}
		},
		p: noop,
		d(detaching) {
			if (detaching) detach(button);
			mounted = false;
			dispose();
		}
	};
}

function create_fragment(ctx) {
	let h1;
	let t1;
	let autocomplete;
	let updating_selectedItem;
	let t2;
	let button0;
	let t3;
	let button0_disabled_value;
	let t4;
	let t5;
	let ul;
	let t6;
	let button1;
	let t8;
	let if_block1_anchor;
	let current;
	let mounted;
	let dispose;

	function autocomplete_selectedItem_binding(value) {
		/*autocomplete_selectedItem_binding*/ ctx[7].call(null, value);
	}

	let autocomplete_props = {
		items: /*courses*/ ctx[2],
		labelFieldName: "label"
	};

	if (/*selectedCourse*/ ctx[0] !== void 0) {
		autocomplete_props.selectedItem = /*selectedCourse*/ ctx[0];
	}

	autocomplete = new AutoComplete({ props: autocomplete_props });
	binding_callbacks.push(() => bind(autocomplete, "selectedItem", autocomplete_selectedItem_binding));
	let if_block0 = /*selectedCourse*/ ctx[0] && create_if_block_1(ctx);
	let each_value = /*selectedCourses*/ ctx[1];
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	let if_block1 = /*selectedCourses*/ ctx[1].length > 0 && create_if_block(ctx);

	return {
		c() {
			h1 = element("h1");
			h1.textContent = "Calendar Generator";
			t1 = space();
			create_component(autocomplete.$$.fragment);
			t2 = space();
			button0 = element("button");
			t3 = text("Add");
			t4 = space();
			if (if_block0) if_block0.c();
			t5 = space();
			ul = element("ul");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			t6 = space();
			button1 = element("button");
			button1.textContent = "reset";
			t8 = space();
			if (if_block1) if_block1.c();
			if_block1_anchor = empty();
			button0.disabled = button0_disabled_value = !/*selectedCourse*/ ctx[0];
		},
		m(target, anchor) {
			insert(target, h1, anchor);
			insert(target, t1, anchor);
			mount_component(autocomplete, target, anchor);
			insert(target, t2, anchor);
			insert(target, button0, anchor);
			append(button0, t3);
			insert(target, t4, anchor);
			if (if_block0) if_block0.m(target, anchor);
			insert(target, t5, anchor);
			insert(target, ul, anchor);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(ul, null);
			}

			insert(target, t6, anchor);
			insert(target, button1, anchor);
			insert(target, t8, anchor);
			if (if_block1) if_block1.m(target, anchor);
			insert(target, if_block1_anchor, anchor);
			current = true;

			if (!mounted) {
				dispose = [
					listen(button0, "click", /*addCourse*/ ctx[3]),
					listen(button1, "click", /*reset*/ ctx[5])
				];

				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			const autocomplete_changes = {};

			if (!updating_selectedItem && dirty & /*selectedCourse*/ 1) {
				updating_selectedItem = true;
				autocomplete_changes.selectedItem = /*selectedCourse*/ ctx[0];
				add_flush_callback(() => updating_selectedItem = false);
			}

			autocomplete.$set(autocomplete_changes);

			if (!current || dirty & /*selectedCourse*/ 1 && button0_disabled_value !== (button0_disabled_value = !/*selectedCourse*/ ctx[0])) {
				button0.disabled = button0_disabled_value;
			}

			if (/*selectedCourse*/ ctx[0]) {
				if (if_block0) {
					if_block0.p(ctx, dirty);
				} else {
					if_block0 = create_if_block_1(ctx);
					if_block0.c();
					if_block0.m(t5.parentNode, t5);
				}
			} else if (if_block0) {
				if_block0.d(1);
				if_block0 = null;
			}

			if (dirty & /*deleteCourse, selectedCourses*/ 18) {
				each_value = /*selectedCourses*/ ctx[1];
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(ul, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value.length;
			}

			if (/*selectedCourses*/ ctx[1].length > 0) {
				if (if_block1) {
					if_block1.p(ctx, dirty);
				} else {
					if_block1 = create_if_block(ctx);
					if_block1.c();
					if_block1.m(if_block1_anchor.parentNode, if_block1_anchor);
				}
			} else if (if_block1) {
				if_block1.d(1);
				if_block1 = null;
			}
		},
		i(local) {
			if (current) return;
			transition_in(autocomplete.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(autocomplete.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(h1);
			if (detaching) detach(t1);
			destroy_component(autocomplete, detaching);
			if (detaching) detach(t2);
			if (detaching) detach(button0);
			if (detaching) detach(t4);
			if (if_block0) if_block0.d(detaching);
			if (detaching) detach(t5);
			if (detaching) detach(ul);
			destroy_each(each_blocks, detaching);
			if (detaching) detach(t6);
			if (detaching) detach(button1);
			if (detaching) detach(t8);
			if (if_block1) if_block1.d(detaching);
			if (detaching) detach(if_block1_anchor);
			mounted = false;
			run_all(dispose);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	const courses = courseData.filter(course => !["NA", "TBA"].includes(course.lecture)).map(course => ({
		...course,
		label: `${course.code} ${course.name}`
	}));

	let selectedCourse;
	let selectedCourses = [];

	function addCourse() {
		$$invalidate(1, selectedCourses = [...selectedCourses, selectedCourse]);
		$$invalidate(0, selectedCourse = "");
	}

	function deleteCourse(idx) {
		$$invalidate(1, selectedCourses = selectedCourses.filter((_, i) => i !== idx));
	}

	function reset() {
		$$invalidate(0, selectedCourse = "");
		$$invalidate(1, selectedCourses = []);
	}

	function downloadCalendar() {
		const text = makeCalendar(selectedCourses);
		const fileName = "course-calendar.ics", fileType = "text/calendar";
		const blob = new Blob([text], { type: fileType });
		const a = document.createElement("a");
		a.download = fileName;
		a.href = URL.createObjectURL(blob);
		a.dataset.downloadurl = [fileType, a.download, a.href].join(":");
		a.style.display = "none";
		a.click();

		setTimeout(
			function () {
				URL.revokeObjectURL(a.href);
			},
			10000
		);
	}

	function autocomplete_selectedItem_binding(value) {
		selectedCourse = value;
		$$invalidate(0, selectedCourse);
	}

	const click_handler = idx => deleteCourse(idx);

	return [
		selectedCourse,
		selectedCourses,
		courses,
		addCourse,
		deleteCourse,
		reset,
		downloadCalendar,
		autocomplete_selectedItem_binding,
		click_handler
	];
}

class App extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, {});
	}
}

export default App;